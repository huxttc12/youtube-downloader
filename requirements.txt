部署
本地测试：
运行 python app.py，访问 http://localhost:5000。

测试下载功能，确保文件正确生成和下载。

服务器部署：
安装依赖：
bash

sudo apt update
sudo apt install python3-pip ffmpeg
pip install -r requirements.txt

配置 Nginx：
nginx

server {
    listen 80;
    server_name your_domain.com;

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

运行 Flask：
使用 Gunicorn 运行生产环境：
bash

pip install gunicorn
gunicorn -w 4 -b 0.0.0.0:5000 app:app

Docker 部署（可选）：
创建 Dockerfile：
dockerfile

FROM python:3.9-slim
RUN apt-get update && apt-get install -y ffmpeg
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "app:app"]

构建和运行：
bash

docker build -t youtube-downloader .
docker run -p 80:5000 youtube-downloader

5. 注意事项
法律合规：确保遵守 YouTube 的服务条款，仅用于合法用途（如备份、个人使用）。

性能优化：
限制并发下载，防止服务器过载。

使用云存储（如 AWS S3）代替本地存储，减少磁盘压力。

维护：
定期更新 yt-dlp（pip install -U yt-dlp），以支持新的网站和修复 bug。

监控服务器日志，处理下载失败或超时问题。

